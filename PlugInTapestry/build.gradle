plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'groovy'
    id 'war'
    id 'application'
    id 'project-report'
    id 'pmd'
    id 'org.springframework.boot' version '2.0.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'nu.studer.jooq' version '3.0.2'
    id 'org.liquibase.gradle' version '2.0.1'
}

description = 'PlugInTapestry application'
group = 'io.github.picodotdev.plugintapestry'
version = '1.7'
mainClassName = 'io.github.picodotdev.plugintapestry.Main'

def versions = [
    tapestry:             '5.4.4',
    tapestry_security:    '0.7.1',
    tapestry_testify:     '1.0.4',
    tapestry_xpath:       '1.0.1',
    spring:               '5.0.11.RELEASE',
    hibernate:            '5.1.16.Final',
    hibernate_validator:  '6.0.13.Final',
    shiro:                '1.3.2',
    guava:                '27.0.1-jre',
    h2:                   '1.4.197',
    log4j2:               '2.11.1',
    junit:                '4.12',
    groovy:               '2.5.4',
    mockito:              '2.23.4',
    geb:                  '2.2',
    selenium:             '3.141.59',
    htmlunit_driver:      '2.33.3',
    htmlunit_csspaser:    '1.2.0',
    spock:                '1.2-groovy-2.5',
    liquibase:            '3.6.2',
    liquibase_groovy_dsl: '2.0.2',
    jboss_vfs:            '3.2.14.Final',
    jboss_logging:        '3.3.2.Final'
]

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2'
	}
}

repositories {
    mavenCentral()
}

// This simulates Maven's 'provided' scope, until it is officially supported by Gradle
// See http://jira.codehaus.org/browse/GRADLE-784
configurations {
    provided
    providedRuntime
    appJavadoc    
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

dependencies {
    def excludeSpring = { exclude(group: 'org.springframework') }
    def excludeShiro = { exclude(group: 'org.apache.shiro') }
    def excludeGroovy = { exclude(group: 'org.codehaus.groovy') }
    def excludeSpringBootStarterLogging = { exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging') }

    // Tapestry
    compile "org.apache.tapestry:tapestry-core:$versions.tapestry"
    compile "org.apache.tapestry:tapestry-hibernate:$versions.tapestry"
    compile "org.apache.tapestry:tapestry-beanvalidator:$versions.tapestry"

    // Compresión automática de javascript y css en el modo producción
    compile "org.apache.tapestry:tapestry-webresources:$versions.tapestry"
    appJavadoc "org.apache.tapestry:tapestry-javadoc:$versions.tapestry"
    
    // Spring
    compile ("org.apache.tapestry:tapestry-spring:$versions.tapestry", excludeSpring)
    compile "org.springframework:spring-jdbc:$versions.spring"
    compile "org.springframework:spring-orm:$versions.spring"
    compile "org.springframework:spring-tx:$versions.spring"

	// Spring Boot
    compile("org.springframework.boot:spring-boot-starter", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-web", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-actuator", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.springframework.boot:spring-boot-autoconfigure")

    // Persistencia
    compile "org.hibernate:hibernate-core:$versions.hibernate"
    compile "org.hibernate:hibernate-validator:$versions.hibernate_validator"
    compile "com.h2database:h2:$versions.h2"
    compile "org.jooq:jooq"
    compile "commons-dbcp:commons-dbcp:1.4"
    
    // Seguridad
    compile("org.tynamo:tapestry-security:$versions.tapestry_security", excludeShiro)
    compile "org.apache.shiro:shiro-all:$versions.shiro"
    
    // Pruebas unitarias
    testCompile("org.apache.tapestry:tapestry-test:$versions.tapestry") { exclude(group: 'org.testng'); exclude(group: 'org.seleniumhq.selenium') }
    testCompile "net.sourceforge.tapestrytestify:tapestry-testify:$versions.tapestry_testify"
    testCompile "net.sourceforge.tapestryxpath:tapestry-xpath:$versions.tapestry_xpath"
    testCompile "junit:junit:$versions.junit"
    testCompile "org.codehaus.groovy:groovy:$versions.groovy"
    testCompile "org.mockito:mockito-core:$versions.mockito"
    testCompile("org.spockframework:spock-core:$versions.spock", excludeGroovy)
    testCompile("org.spockframework:spock-spring:$versions.spock", excludeGroovy)
    testCompile "org.seleniumhq.selenium:selenium-api:$versions.selenium"
    testCompile "org.seleniumhq.selenium:selenium-java:$versions.selenium"
    testCompile "org.seleniumhq.selenium:selenium-server:$versions.selenium"
    testCompile "org.seleniumhq.selenium:htmlunit-driver:$versions.htmlunit_driver"
    testCompile "net.sourceforge.htmlunit:htmlunit-cssparser:$versions.htmlunit_csspaser"
 
    // Pruebas de integración    
    testCompile("org.gebish:geb-spock:$versions.geb", excludeGroovy)
    testCompile "org.gebish:geb-junit4:$versions.geb"
    testCompile("org.springframework.boot:spring-boot-starter-test", excludeSpringBootStarterLogging)

    // Webjars
    runtime 'org.webjars:requirejs:2.3.5'
    runtime 'org.webjars:jquery:3.3.1-1'
    runtime 'org.webjars.bower:underscore:1.9.1'

	// Otras
    compile "javax:javaee-api:8.0"
	compile "com.google.guava:guava:$versions.guava"
	
    providedCompile "org.jboss:jboss-vfs:$versions.jboss_vfs"

    runtime "org.jboss.logging:jboss-logging:$versions.jboss_logging"
    runtime "org.eclipse:yasson:1.0.1"
    runtime "org.glassfish:javax.json:1.1.2"
    runtime "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    runtime "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6"

    jooqRuntime "com.h2database:h2:$versions.h2"
    liquibaseRuntime "org.liquibase:liquibase-core:$versions.liquibase"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:$versions.liquibase_groovy_dsl"
    liquibaseRuntime "com.h2database:h2:$versions.h2"
}

pmd {
  ruleSets = ["java-basic", "java-braces"]
  ruleSetFiles = files("misc/ruleset.xml")
}

test {
    // Excluir de los teses unitarios los teses de integración
    exclude '**/*Spec.*'
}

task integrationTest(type: Test) {
    group = 'Verification'
    description = 'Runs the integration/functional tests.'
    systemProperty 'geb.driver', 'htmlunit'

    // Incluir los teses de integración
    include '**/geb/*Spec.*'
}

task appJavadoc(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
    destinationDir = reporting.file('appJavadoc')
    options.tagletPath = configurations.appJavadoc.files.asType(List)
    options.taglets = ['org.apache.tapestry5.javadoc.TapestryDocTaglet']
    
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into appJavadoc.destinationDir
            exclude '**/*.java'
            exclude '**/*.xdoc'
            exclude '**/package.html'
        }

        copy {
            from file('src/javadoc/images')
            into appJavadoc.destinationDir
        }
    }
}

jooq {
    version = '3.11.2'
    edition = 'OSS'
    h2(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:./misc/database/app'
            user = 'sa'
            password = 'sa'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PLUGINTAPESTRY'
                includes = '.*'
                excludes = ''
                forcedTypes {
                    forcedType {
                        types = 'TIMESTAMP'
                        userType = 'java.time.LocalDateTime'
                        converter = 'io.github.picodotdev.plugintapestry.misc.TimestampConverter'
                    }
                }
            }
            generate {
                interfaces = true
                pojos = true
                relations = true
                validationAnnotations = true
            }
            target {
                packageName = 'io.github.picodotdev.plugintapestry.entities.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

liquibase {
    activities { 
        main {
            changeLogFile 'misc/database/changelog.xml'
            url 'jdbc:h2:./misc/database/app'
            username 'sa'
            password 'sa'
        }
    }
    runList = 'main'
}
