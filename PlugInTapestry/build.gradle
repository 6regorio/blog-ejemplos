plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'groovy'
    id 'war'
    id 'application'
    id 'project-report'
    id 'pmd'
    id 'nu.studer.jooq' version '3.0.3'
    id 'org.liquibase.gradle' version '2.0.1'
}

description = 'PlugInTapestry application'
group = 'io.github.picodotdev.plugintapestry'
version = '1.8'
mainClassName = 'io.github.picodotdev.plugintapestry.Main'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
    versions = [
        tapestry:             '5.4.4',
        tapestrySecurity:     '0.7.1',
        tapestryTestify:      '1.0.4',
        tapestryXpath:        '1.0.1',
        commons_dbcp:         '1.4',
        hibernate:            '5.1.16.Final',
        hibernateValidator:   '6.0.13.Final',
        geb:                  '2.3.1',
        groovy:               '2.5.4',
        guava:                '27.0.1-jre',
        h2:                   '1.4.197',
        htmlunitDriver:       '2.33.3',
        htmlunitCsspaser:     '1.2.0',
        jackson:              '2.9.6',
        javaee:               '8.0',
        json:                 '1.1.2',
        jooq:                 '3.11.10',
        junit:                '4.12',
        liquibase:            '3.6.2',
        liquibaseGroovyDsl:   '2.0.2',
        log4j2:               '2.11.1',
        mockito:              '2.23.4',
        selenium:             '3.141.59',
        shiro:                '1.3.2',
        spock:                '1.3-RC1-groovy-2.5',
        spring:               '5.0.11.RELEASE',
        springBoot:           '2.1.4.RELEASE',
        jbossVfs:             '3.2.14.Final',
        jbossLogging:         '3.3.2.Final',
        webjars: [
            requirejs:        '2.3.5',
            jquery:           '3.3.1-1',
            underscore:       '1.9.1',
            bootstrapSelect:  '1.13.8'
        ],
        yasson:               '1.0.1'
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repository.apache.org/content/repositories/staging/'
    }
}

// This simulates Maven's 'provided' scope, until it is officially supported by Gradle
// See http://jira.codehaus.org/browse/GRADLE-784
configurations {
    provided
    providedRuntime
    appJavadoc    
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

configurations.all {
    resolutionStrategy {
        force "org.hibernate:hibernate-core:$versions.hibernate"
        force "org.apache.shiro:shiro-all:$versions.shiro"
        force "org.codehaus.groovy:groovy:$versions.groovy"
    }
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:$versions.springBoot")

    def excludeSpringBootStarterLogging = { exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging') }

    // Tapestry
    compile("org.apache.tapestry:tapestry-core:$versions.tapestry")
    compile("org.apache.tapestry:tapestry-hibernate:$versions.tapestry")
    compile("org.apache.tapestry:tapestry-beanvalidator:$versions.tapestry")

    // Compresión automática de javascript y css en el modo producción
    compile("org.apache.tapestry:tapestry-webresources:$versions.tapestry")
    appJavadoc("org.apache.tapestry:tapestry-javadoc:$versions.tapestry")

    // Spring
    compile("org.apache.tapestry:tapestry-spring:$versions.tapestry")
    compile("org.springframework:spring-jdbc:$versions.spring")
    compile("org.springframework:spring-orm:$versions.spring")
    compile("org.springframework:spring-tx:$versions.spring")

	// Spring Boot
    compile("org.springframework.boot:spring-boot-starter", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-web", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-actuator", excludeSpringBootStarterLogging)
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.springframework.boot:spring-boot-autoconfigure")
    compile("org.springframework.boot:spring-boot-starter-tomcat")

    // Persistencia
    compile("org.jooq:jooq:$versions.jooq")
    compile("commons-dbcp:commons-dbcp:$versions.commons_dbcp")
    compile("com.h2database:h2:$versions.h2")
    
    // Seguridad
    compile("org.tynamo:tapestry-security:$versions.tapestrySecurity")

    // Otras
    compile("javax:javaee-api:$versions.javaee")
    compile("com.google.guava:guava:$versions.guava")
    
    // Pruebas unitarias
    testCompile("org.apache.tapestry:tapestry-test:$versions.tapestry") { exclude(group: 'org.testng'); exclude(group: 'org.seleniumhq.selenium') }
    testCompile("net.sourceforge.tapestrytestify:tapestry-testify:$versions.tapestryTestify")
    testCompile("net.sourceforge.tapestryxpath:tapestry-xpath:$versions.tapestryXpath")
    testCompile("junit:junit:$versions.junit")
    testCompile("org.mockito:mockito-core:$versions.mockito")
    testCompile("org.spockframework:spock-core:$versions.spock")
    testCompile("org.spockframework:spock-spring:$versions.spock")
 
    // Pruebas de integración    
    testCompile("org.gebish:geb-spock:$versions.geb")
    testCompile("org.gebish:geb-junit4:$versions.geb")
    testCompile("org.seleniumhq.selenium:selenium-support:${versions.selenium}")
    testCompile("org.seleniumhq.selenium:htmlunit-driver:${versions.htmlunitDriver}")
    testCompile("org.springframework.boot:spring-boot-starter-test", excludeSpringBootStarterLogging)

    // Webjars
    runtime("org.webjars:requirejs:$versions.webjars.requirejs")
    runtime("org.webjars:jquery:$versions.webjars.jquery")
    runtime("org.webjars.bower:underscore:$versions.webjars.underscore")
    runtime("org.webjars:bootstrap-select:$versions.webjars.bootstrapSelect")

    providedCompile("org.jboss:jboss-vfs:$versions.jbossVfs")

    runtime("org.jboss.logging:jboss-logging:$versions.jbossLogging")
    runtime("org.eclipse:yasson:$versions.yasson")
    runtime("org.glassfish:javax.json:$versions.json")
    runtime("com.fasterxml.jackson.core:jackson-databind:$versions.jackson")
    runtime("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$versions.jackson")

    jooqRuntime("com.h2database:h2:$versions.h2")
    liquibaseRuntime("org.liquibase:liquibase-core:$versions.liquibase")
    liquibaseRuntime("org.liquibase:liquibase-groovy-dsl:$versions.liquibaseGroovyDsl")
    liquibaseRuntime("com.h2database:h2:$versions.h2")
}

pmd {
  ruleSets = ["java-basic", "java-braces"]
  ruleSetFiles = files("misc/ruleset.xml")
}

test {
    // Excluir de los teses unitarios los teses de integración
    exclude '**/geb/*Spec.*'
}

task integrationTest(type: Test) {
    group = 'Verification'
    description = 'Runs the integration/functional tests.'
    systemProperty 'geb.driver', 'htmlunit'

    // Incluir los teses de integración
    include '**/geb/*Spec.*'
}

task appJavadoc(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
    destinationDir = reporting.file('appJavadoc')
    options.tagletPath = configurations.appJavadoc.files.asType(List)
    options.taglets = ['org.apache.tapestry5.javadoc.TapestryDocTaglet']
    
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into appJavadoc.destinationDir
            exclude '**/*.java'
            exclude '**/*.xdoc'
            exclude '**/package.html'
        }

        copy {
            from file('src/javadoc/images')
            into appJavadoc.destinationDir
        }
    }
}

jooq {
    version = '3.11.2'
    edition = 'OSS'
    h2(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:./misc/database/app'
            user = 'sa'
            password = 'sa'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PLUGINTAPESTRY'
                includes = '.*'
                excludes = ''
                forcedTypes {
                    forcedType {
                        types = 'TIMESTAMP'
                        userType = 'java.time.LocalDateTime'
                        converter = 'io.github.picodotdev.plugintapestry.misc.TimestampConverter'
                    }
                }
            }
            generate {
                interfaces = true
                pojos = true
                relations = true
                validationAnnotations = true
            }
            target {
                packageName = 'io.github.picodotdev.plugintapestry.entities.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

liquibase {
    activities { 
        main {
            changeLogFile 'misc/database/changelog.xml'
            url 'jdbc:h2:./misc/database/app'
            username 'sa'
            password 'sa'
        }
    }
    runList = 'main'
}
